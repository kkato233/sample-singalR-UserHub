@{
    ViewData["Title"] = "Home Page";

    var userId = Context.User.Identity.Name;
}

@section Styles {
    <link href="~/lib/toastr.js/toastr.min.css" rel="stylesheet" />
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<!-- ユーザを識別するID -->
<input type="hidden" id="userGroup" value="@(userId)" />

<div class="container">
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-2">Message</div>
        <div class="col-4"><input type="text" id="messageInput" /></div>
    </div>
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-6">
            <input type="button" id="sendButton" value="Send Message" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-6">
        <ul id="messagesList"></ul>
    </div>
</div>

<form asp-action="Index" method="post" id="heavyEventForm">
    <input id="heavyEvent" type="submit" value="遅い処理" />
</form>

@section Scripts {
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script src="~/lib/toastr.js/toastr.min.js"></script>
    <script type="text/javascript">

        // SignalR 接続先
        var connection = new signalR.HubConnectionBuilder().withUrl("/UserHub").build();

        // メッセージ受信時の処理
        connection.on("ReceiveMessage", function (message) {
            // 通知設定
            var options = {
                "timeOut": 30000
            };
            // 受信したメッセージの表示
            toastr.info(message, "", options);
        });
        // 終了メッセージ受信時の処理
        connection.on("ReceiveFinishMessage", function () {
            // 1秒後に トーストクリア
            setTimeout(function () {
                toastr.clear();
            }, 1000);
        });

        var userGroup = $("#userGroup").val();

        // SignalR 受信処理を開始
        connection.start().then(function () {
            if (userGroup) {
                // グループに参加
                connection.invoke("AddToGroup", userGroup).catch(function (err) {
                    return console.error(err.toString());
                });
            }
        }).catch(function (err) {
            return console.error(err.toString());
        });

        // クライアントによる 情報の通知
        if (userGroup) {
            $("#sendButton").click(function () {
                var message = $("#messageInput").val();
                connection.invoke("SendClientMessage", userGroup, message).catch(function (err) {
                    return console.error(err.toString());
                });
                $("#messageInput").val("");
            });
        } else {
            $("#sendButton").prop("disabled", true);
        }

        // 遅い処理のクリック時の動作
        $("#heavyEvent").click(function (e) {
            
            // デフォルトのフォーム送信を防止
            e.preventDefault();

            // FormData オブジェクトを使用してフォームデータを取得
            let formData = new FormData(document.getElementById('heavyEventForm'));

            // Fetch API を使用して非同期にデータを送信
            fetch('/Home/Index', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json()) // 応答を JSON として解析
                .then(data => {
                    // 成功した場合の処理
                    document.getElementById('result').textContent = '送信成功: ' + data.message;
                })
                .catch(error => {
                    // エラー処理
                    document.getElementById('result').textContent = '送信エラー: ' + error;
                });
        });
    </script>
}